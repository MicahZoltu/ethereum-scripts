// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

import { EventDescription, DecodedEvent, ParameterDescription, EncodableArray, EncodableTuple, decodeParameters, decodeEvent, decodeMethod } from '@zoltu/ethereum-abi-encoder'
export { EncodableArray, EncodableTuple }

export interface Log {
	readonly topics: ReadonlyArray<bigint>
	readonly data: Uint8Array
}
export interface TransactionReceipt {
	readonly status: boolean
	readonly logs: Iterable<Log>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription & {signature: string} } = {
	'8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': {"type":"event","name":"Approval","signature":"Approval(address,address,uint256)","inputs":[{"type":"address","name":"src","indexed":true},{"type":"address","name":"guy","indexed":true},{"type":"uint256","name":"wad","indexed":false}]},
	'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {"type":"event","name":"Transfer","signature":"Transfer(address,address,uint256)","inputs":[{"type":"address","name":"src","indexed":true},{"type":"address","name":"dst","indexed":true},{"type":"uint256","name":"wad","indexed":false}]}
}

export namespace Erc20 {
	export interface Approval extends DecodedEvent {
		name: 'Approval'
		parameters: {
			src: bigint
			guy: bigint
			wad: bigint
		}
	}
}

export namespace Erc20 {
	export interface Transfer extends DecodedEvent {
		name: 'Transfer'
		parameters: {
			src: bigint
			dst: bigint
			wad: bigint
		}
	}
}

export type Event = DecodedEvent | Erc20.Approval | Erc20.Transfer


export interface Dependencies {
	call(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<Uint8Array>
	submitTransaction(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract {
	protected constructor(protected readonly dependencies: Dependencies, public readonly address: bigint) { }

	protected async localCall(methodSignature: string, outputParameterDescriptions: ReadonlyArray<ParameterDescription>, methodParameters: EncodableArray, attachedEth?: bigint): Promise<EncodableTuple> {
		const result = await this.dependencies.call(this.address, methodSignature, methodParameters, attachedEth || 0n)
		if (result.length >= 4 && result[0] === 8 && result[1] === 195 && result[2] === 121 && result[3] === 160) {
			const decodedError = decodeMethod(0x08c379a0, [ { name: 'message', type: 'string' } ], result) as { message: string }
			throw new Error(`Contract Error: ${decodedError.message}`)
		}
		return decodeParameters(outputParameterDescriptions, result)
	}

	protected async remoteCall(methodSignature: string, parameters: EncodableArray, errorContext: { transactionName: string }, attachedEth?: bigint): Promise<Array<Event>> {
		const transactionReceipt = await this.dependencies.submitTransaction(this.address, methodSignature, parameters, attachedEth || 0n)
		if (!transactionReceipt.status) throw new Error(`Remote call of ${errorContext.transactionName} failed: ${JSON.stringify(transactionReceipt)}`)
		return this.decodeEvents(transactionReceipt.logs)
	}

	private decodeEvents(encodedEvents: Iterable<Log>): Array<Event> {
		const decodedEvents: Array<DecodedEvent> = []
		for (const encodedEvent of encodedEvents) {
			const decodedEvent = this.tryDecodeEvent(encodedEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		}
		return decodedEvents as Array<Event>
	}

	private tryDecodeEvent(encodedEvent: Log): DecodedEvent | null {
		const signatureHash = encodedEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash.toString(16)]
		if (!eventDescription) return null
		return decodeEvent(eventDescription, encodedEvent.topics, encodedEvent.data)
	}
}


export class Erc20 extends Contract {
	public constructor(dependencies: Dependencies, address: bigint) {
		super(dependencies, address)
	}

	public name_ = async (): Promise<string> => {
		const methodSignature = 'name()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"string"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <string>result.result
	}

	public approve = async (guy: bigint, wad: bigint): Promise<Array<Event>> => {
		const methodSignature = 'approve(address guy, uint256 wad)' as const
		const methodParameters = [guy, wad] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'approve' })
	}

	public approve_ = async (guy: bigint, wad: bigint): Promise<boolean> => {
		const methodSignature = 'approve(address guy, uint256 wad)' as const
		const methodParameters = [guy, wad] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public totalSupply_ = async (): Promise<bigint> => {
		const methodSignature = 'totalSupply()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public transferFrom = async (src: bigint, dst: bigint, wad: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferFrom(address src, address dst, uint256 wad)' as const
		const methodParameters = [src, dst, wad] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferFrom' })
	}

	public transferFrom_ = async (src: bigint, dst: bigint, wad: bigint): Promise<boolean> => {
		const methodSignature = 'transferFrom(address src, address dst, uint256 wad)' as const
		const methodParameters = [src, dst, wad] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public decimals_ = async (): Promise<bigint> => {
		const methodSignature = 'decimals()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint8"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public balanceOf_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'balanceOf(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public symbol_ = async (): Promise<string> => {
		const methodSignature = 'symbol()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"string"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <string>result.result
	}

	public transfer = async (dst: bigint, wad: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transfer(address dst, uint256 wad)' as const
		const methodParameters = [dst, wad] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transfer' })
	}

	public transfer_ = async (dst: bigint, wad: bigint): Promise<boolean> => {
		const methodSignature = 'transfer(address dst, uint256 wad)' as const
		const methodParameters = [dst, wad] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public allowance_ = async (arg0: bigint, arg1: bigint): Promise<bigint> => {
		const methodSignature = 'allowance(address , address )' as const
		const methodParameters = [arg0, arg1] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}
}
