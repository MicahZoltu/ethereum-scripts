// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

import { EventDescription, DecodedEvent, ParameterDescription, EncodableArray, EncodableTuple, decodeParameters, decodeEvent, decodeMethod } from '@zoltu/ethereum-abi-encoder'
export { EncodableArray, EncodableTuple }

export interface Log {
	readonly topics: ReadonlyArray<bigint>
	readonly data: Uint8Array
}
export interface TransactionReceipt {
	readonly status: boolean
	readonly logs: Iterable<Log>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription & {signature: string} } = {

}



export type Event = DecodedEvent


export interface Dependencies {
	call(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<Uint8Array>
	submitTransaction(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract {
	protected constructor(protected readonly dependencies: Dependencies, public readonly address: bigint) { }

	protected async localCall(methodSignature: string, outputParameterDescriptions: ReadonlyArray<ParameterDescription>, methodParameters: EncodableArray, attachedEth?: bigint): Promise<EncodableTuple> {
		const result = await this.dependencies.call(this.address, methodSignature, methodParameters, attachedEth || 0n)
		if (result.length >= 4 && result[0] === 8 && result[1] === 195 && result[2] === 121 && result[3] === 160) {
			const decodedError = decodeMethod(0x08c379a0, [ { name: 'message', type: 'string' } ], result) as { message: string }
			throw new Error(`Contract Error: ${decodedError.message}`)
		}
		return decodeParameters(outputParameterDescriptions, result)
	}

	protected async remoteCall(methodSignature: string, parameters: EncodableArray, errorContext: { transactionName: string }, attachedEth?: bigint): Promise<Array<Event>> {
		const transactionReceipt = await this.dependencies.submitTransaction(this.address, methodSignature, parameters, attachedEth || 0n)
		if (!transactionReceipt.status) throw new Error(`Remote call of ${errorContext.transactionName} failed: ${JSON.stringify(transactionReceipt)}`)
		return this.decodeEvents(transactionReceipt.logs)
	}

	private decodeEvents(encodedEvents: Iterable<Log>): Array<Event> {
		const decodedEvents: Array<DecodedEvent> = []
		for (const encodedEvent of encodedEvents) {
			const decodedEvent = this.tryDecodeEvent(encodedEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		}
		return decodedEvents as Array<Event>
	}

	private tryDecodeEvent(encodedEvent: Log): DecodedEvent | null {
		const signatureHash = encodedEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash.toString(16)]
		if (!eventDescription) return null
		return decodeEvent(eventDescription, encodedEvent.topics, encodedEvent.data)
	}
}


export class UniswapRouter extends Contract {
	public constructor(dependencies: Dependencies, address: bigint) {
		super(dependencies, address)
	}

	public WETH_ = async (): Promise<bigint> => {
		const methodSignature = 'WETH()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"address","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public addLiquidity = async (tokenA: bigint, tokenB: bigint, amountADesired: bigint, amountBDesired: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)' as const
		const methodParameters = [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'addLiquidity' })
	}

	public addLiquidity_ = async (tokenA: bigint, tokenB: bigint, amountADesired: bigint, amountBDesired: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint): Promise<{amountA: bigint, amountB: bigint, liquidity: bigint}> => {
		const methodSignature = 'addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)' as const
		const methodParameters = [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{amountA: bigint, amountB: bigint, liquidity: bigint}>result
	}

	public addLiquidityETH = async (token: bigint, amountTokenDesired: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<Event>> => {
		const methodSignature = 'addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'addLiquidityETH' }, attachedEth)
	}

	public addLiquidityETH_ = async (token: bigint, amountTokenDesired: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<{amountToken: bigint, amountETH: bigint, liquidity: bigint}> => {
		const methodSignature = 'addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters, attachedEth)
		return <{amountToken: bigint, amountETH: bigint, liquidity: bigint}>result
	}

	public factory_ = async (): Promise<bigint> => {
		const methodSignature = 'factory()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"address","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getAmountIn_ = async (amountOut: bigint, reserveIn: bigint, reserveOut: bigint): Promise<bigint> => {
		const methodSignature = 'getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)' as const
		const methodParameters = [amountOut, reserveIn, reserveOut] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountIn","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.amountIn
	}

	public getAmountOut_ = async (amountIn: bigint, reserveIn: bigint, reserveOut: bigint): Promise<bigint> => {
		const methodSignature = 'getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)' as const
		const methodParameters = [amountIn, reserveIn, reserveOut] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountOut","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.amountOut
	}

	public getAmountsIn_ = async (amountOut: bigint, path: ReadonlyArray<bigint>): Promise<Array<bigint>> => {
		const methodSignature = 'getAmountsIn(uint256 amountOut, address[] path)' as const
		const methodParameters = [amountOut, path] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}

	public getAmountsOut_ = async (amountIn: bigint, path: ReadonlyArray<bigint>): Promise<Array<bigint>> => {
		const methodSignature = 'getAmountsOut(uint256 amountIn, address[] path)' as const
		const methodParameters = [amountIn, path] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}

	public quote_ = async (amountA: bigint, reserveA: bigint, reserveB: bigint): Promise<bigint> => {
		const methodSignature = 'quote(uint256 amountA, uint256 reserveA, uint256 reserveB)' as const
		const methodParameters = [amountA, reserveA, reserveB] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountB","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.amountB
	}

	public removeLiquidity = async (tokenA: bigint, tokenB: bigint, liquidity: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)' as const
		const methodParameters = [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidity' })
	}

	public removeLiquidity_ = async (tokenA: bigint, tokenB: bigint, liquidity: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint): Promise<{amountA: bigint, amountB: bigint}> => {
		const methodSignature = 'removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)' as const
		const methodParameters = [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{amountA: bigint, amountB: bigint}>result
	}

	public removeLiquidityETH = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidityETH' })
	}

	public removeLiquidityETH_ = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint): Promise<{amountToken: bigint, amountETH: bigint}> => {
		const methodSignature = 'removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{amountToken: bigint, amountETH: bigint}>result
	}

	public removeLiquidityETHSupportingFeeOnTransferTokens = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidityETHSupportingFeeOnTransferTokens' })
	}

	public removeLiquidityETHSupportingFeeOnTransferTokens_ = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint): Promise<bigint> => {
		const methodSignature = 'removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountETH","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.amountETH
	}

	public removeLiquidityETHWithPermit = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidityETHWithPermit' })
	}

	public removeLiquidityETHWithPermit_ = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<{amountToken: bigint, amountETH: bigint}> => {
		const methodSignature = 'removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{amountToken: bigint, amountETH: bigint}>result
	}

	public removeLiquidityETHWithPermitSupportingFeeOnTransferTokens = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens' })
	}

	public removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_ = async (token: bigint, liquidity: bigint, amountTokenMin: bigint, amountETHMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<bigint> => {
		const methodSignature = 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountETH","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.amountETH
	}

	public removeLiquidityWithPermit = async (tokenA: bigint, tokenB: bigint, liquidity: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<Array<Event>> => {
		const methodSignature = 'removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'removeLiquidityWithPermit' })
	}

	public removeLiquidityWithPermit_ = async (tokenA: bigint, tokenB: bigint, liquidity: bigint, amountAMin: bigint, amountBMin: bigint, to: bigint, deadline: bigint, approveMax: boolean, v: bigint, r: bigint, s: bigint): Promise<{amountA: bigint, amountB: bigint}> => {
		const methodSignature = 'removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)' as const
		const methodParameters = [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{amountA: bigint, amountB: bigint}>result
	}

	public swapETHForExactTokens = async (amountOut: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapETHForExactTokens' }, attachedEth)
	}

	public swapETHForExactTokens_ = async (amountOut: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters, attachedEth)
		return <Array<bigint>>result.amounts
	}

	public swapExactETHForTokens = async (amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactETHForTokens' }, attachedEth)
	}

	public swapExactETHForTokens_ = async (amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters, attachedEth)
		return <Array<bigint>>result.amounts
	}

	public swapExactETHForTokensSupportingFeeOnTransferTokens = async (amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactETHForTokensSupportingFeeOnTransferTokens' }, attachedEth)
	}

	public swapExactETHForTokensSupportingFeeOnTransferTokens_ = async (amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint, attachedEth?: bigint): Promise<void> => {
		const methodSignature = 'swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters, attachedEth)
	}

	public swapExactTokensForETH = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactTokensForETH' })
	}

	public swapExactTokensForETH_ = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}

	public swapExactTokensForETHSupportingFeeOnTransferTokens = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactTokensForETHSupportingFeeOnTransferTokens' })
	}

	public swapExactTokensForETHSupportingFeeOnTransferTokens_ = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<void> => {
		const methodSignature = 'swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public swapExactTokensForTokens = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactTokensForTokens' })
	}

	public swapExactTokensForTokens_ = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}

	public swapExactTokensForTokensSupportingFeeOnTransferTokens = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapExactTokensForTokensSupportingFeeOnTransferTokens' })
	}

	public swapExactTokensForTokensSupportingFeeOnTransferTokens_ = async (amountIn: bigint, amountOutMin: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<void> => {
		const methodSignature = 'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountIn, amountOutMin, path, to, deadline] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public swapTokensForExactETH = async (amountOut: bigint, amountInMax: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, amountInMax, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapTokensForExactETH' })
	}

	public swapTokensForExactETH_ = async (amountOut: bigint, amountInMax: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, amountInMax, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}

	public swapTokensForExactTokens = async (amountOut: bigint, amountInMax: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<Event>> => {
		const methodSignature = 'swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, amountInMax, path, to, deadline] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'swapTokensForExactTokens' })
	}

	public swapTokensForExactTokens_ = async (amountOut: bigint, amountInMax: bigint, path: ReadonlyArray<bigint>, to: bigint, deadline: bigint): Promise<Array<bigint>> => {
		const methodSignature = 'swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)' as const
		const methodParameters = [amountOut, amountInMax, path, to, deadline] as const
		const outputParameterDescriptions = [{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <Array<bigint>>result.amounts
	}
}
