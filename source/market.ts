// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

import { EventDescription, DecodedEvent, ParameterDescription, EncodableArray, EncodableTuple, decodeParameters, decodeEvent, decodeMethod } from '@zoltu/ethereum-abi-encoder'
export { EncodableArray, EncodableTuple }

export interface Log {
	readonly topics: ReadonlyArray<bigint>
	readonly data: Uint8Array
}
export interface TransactionReceipt {
	readonly status: boolean
	readonly logs: Iterable<Log>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription & {signature: string} } = {

}



export type Event = DecodedEvent


export interface Dependencies {
	call(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<Uint8Array>
	submitTransaction(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract {
	protected constructor(protected readonly dependencies: Dependencies, public readonly address: bigint) { }

	protected async localCall(methodSignature: string, outputParameterDescriptions: ReadonlyArray<ParameterDescription>, methodParameters: EncodableArray, attachedEth?: bigint): Promise<EncodableTuple> {
		const result = await this.dependencies.call(this.address, methodSignature, methodParameters, attachedEth || 0n)
		if (result.length >= 4 && result[0] === 8 && result[1] === 195 && result[2] === 121 && result[3] === 160) {
			const decodedError = decodeMethod(0x08c379a0, [ { name: 'message', type: 'string' } ], result) as { message: string }
			throw new Error(`Contract Error: ${decodedError.message}`)
		}
		return decodeParameters(outputParameterDescriptions, result)
	}

	protected async remoteCall(methodSignature: string, parameters: EncodableArray, errorContext: { transactionName: string }, attachedEth?: bigint): Promise<Array<Event>> {
		const transactionReceipt = await this.dependencies.submitTransaction(this.address, methodSignature, parameters, attachedEth || 0n)
		if (!transactionReceipt.status) throw new Error(`Remote call of ${errorContext.transactionName} failed: ${JSON.stringify(transactionReceipt)}`)
		return this.decodeEvents(transactionReceipt.logs)
	}

	private decodeEvents(encodedEvents: Iterable<Log>): Array<Event> {
		const decodedEvents: Array<DecodedEvent> = []
		for (const encodedEvent of encodedEvents) {
			const decodedEvent = this.tryDecodeEvent(encodedEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		}
		return decodedEvents as Array<Event>
	}

	private tryDecodeEvent(encodedEvent: Log): DecodedEvent | null {
		const signatureHash = encodedEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash.toString(16)]
		if (!eventDescription) return null
		return decodeEvent(eventDescription, encodedEvent.topics, encodedEvent.data)
	}
}


export class Market extends Contract {
	public constructor(dependencies: Dependencies, address: bigint) {
		super(dependencies, address)
	}

	public affiliateFeeDivisor_ = async (): Promise<bigint> => {
		const methodSignature = 'affiliateFeeDivisor()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public augur_ = async (): Promise<bigint> => {
		const methodSignature = 'augur()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IAugur","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public cash_ = async (): Promise<bigint> => {
		const methodSignature = 'cash()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract ICash","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public contribute = async (payoutNumerators: ReadonlyArray<bigint>, amount: bigint, description: string): Promise<Array<Event>> => {
		const methodSignature = 'contribute(uint256[] _payoutNumerators, uint256 _amount, string _description)' as const
		const methodParameters = [payoutNumerators, amount, description] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'contribute' })
	}

	public contribute_ = async (payoutNumerators: ReadonlyArray<bigint>, amount: bigint, description: string): Promise<boolean> => {
		const methodSignature = 'contribute(uint256[] _payoutNumerators, uint256 _amount, string _description)' as const
		const methodParameters = [payoutNumerators, amount, description] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public contributeToTentative = async (payoutNumerators: ReadonlyArray<bigint>, amount: bigint, description: string): Promise<Array<Event>> => {
		const methodSignature = 'contributeToTentative(uint256[] _payoutNumerators, uint256 _amount, string _description)' as const
		const methodParameters = [payoutNumerators, amount, description] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'contributeToTentative' })
	}

	public contributeToTentative_ = async (payoutNumerators: ReadonlyArray<bigint>, amount: bigint, description: string): Promise<boolean> => {
		const methodSignature = 'contributeToTentative(uint256[] _payoutNumerators, uint256 _amount, string _description)' as const
		const methodParameters = [payoutNumerators, amount, description] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public crowdsourcerGeneration_ = async (): Promise<bigint> => {
		const methodSignature = 'crowdsourcerGeneration()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public crowdsourcers_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'crowdsourcers(bytes32 )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"internalType":"address","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public deriveMarketCreatorFeeAmount_ = async (amount: bigint): Promise<bigint> => {
		const methodSignature = 'deriveMarketCreatorFeeAmount(uint256 _amount)' as const
		const methodParameters = [amount] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public derivePayoutDistributionHash_ = async (payoutNumerators: ReadonlyArray<bigint>): Promise<bigint> => {
		const methodSignature = 'derivePayoutDistributionHash(uint256[] _payoutNumerators)' as const
		const methodParameters = [payoutNumerators] as const
		const outputParameterDescriptions = [{"internalType":"bytes32","name":"","type":"bytes32"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public disavowCrowdsourcers = async (): Promise<Array<Event>> => {
		const methodSignature = 'disavowCrowdsourcers()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'disavowCrowdsourcers' })
	}

	public disavowCrowdsourcers_ = async (): Promise<boolean> => {
		const methodSignature = 'disavowCrowdsourcers()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public doInitialReport = async (payoutNumerators: ReadonlyArray<bigint>, description: string, additionalStake: bigint): Promise<Array<Event>> => {
		const methodSignature = 'doInitialReport(uint256[] _payoutNumerators, string _description, uint256 _additionalStake)' as const
		const methodParameters = [payoutNumerators, description, additionalStake] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'doInitialReport' })
	}

	public doInitialReport_ = async (payoutNumerators: ReadonlyArray<bigint>, description: string, additionalStake: bigint): Promise<boolean> => {
		const methodSignature = 'doInitialReport(uint256[] _payoutNumerators, string _description, uint256 _additionalStake)' as const
		const methodParameters = [payoutNumerators, description, additionalStake] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public finalize = async (): Promise<Array<Event>> => {
		const methodSignature = 'finalize()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'finalize' })
	}

	public finalize_ = async (): Promise<boolean> => {
		const methodSignature = 'finalize()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public getCrowdsourcer_ = async (payoutDistributionHash: bigint): Promise<bigint> => {
		const methodSignature = 'getCrowdsourcer(bytes32 _payoutDistributionHash)' as const
		const methodParameters = [payoutDistributionHash] as const
		const outputParameterDescriptions = [{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getDesignatedReportingEndTime_ = async (): Promise<bigint> => {
		const methodSignature = 'getDesignatedReportingEndTime()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getDisputePacingOn_ = async (): Promise<boolean> => {
		const methodSignature = 'getDisputePacingOn()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public getDisputeWindow_ = async (): Promise<bigint> => {
		const methodSignature = 'getDisputeWindow()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IDisputeWindow","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getEndTime_ = async (): Promise<bigint> => {
		const methodSignature = 'getEndTime()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getFinalizationTime_ = async (): Promise<bigint> => {
		const methodSignature = 'getFinalizationTime()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getForkingMarket_ = async (): Promise<bigint> => {
		const methodSignature = 'getForkingMarket()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IMarket","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getHighestNonTentativeParticipantStake_ = async (): Promise<bigint> => {
		const methodSignature = 'getHighestNonTentativeParticipantStake()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getInitialReporter_ = async (): Promise<bigint> => {
		const methodSignature = 'getInitialReporter()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IInitialReporter","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getInitialized_ = async (): Promise<boolean> => {
		const methodSignature = 'getInitialized()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public getMarketCreatorSettlementFeeDivisor_ = async (): Promise<bigint> => {
		const methodSignature = 'getMarketCreatorSettlementFeeDivisor()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getNumParticipants_ = async (): Promise<bigint> => {
		const methodSignature = 'getNumParticipants()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getNumTicks_ = async (): Promise<bigint> => {
		const methodSignature = 'getNumTicks()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getNumberOfOutcomes_ = async (): Promise<bigint> => {
		const methodSignature = 'getNumberOfOutcomes()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getOpenInterest_ = async (): Promise<bigint> => {
		const methodSignature = 'getOpenInterest()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getOwner_ = async (): Promise<bigint> => {
		const methodSignature = 'getOwner()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"address","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getParticipantStake_ = async (): Promise<bigint> => {
		const methodSignature = 'getParticipantStake()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getReputationToken_ = async (): Promise<bigint> => {
		const methodSignature = 'getReputationToken()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IV2ReputationToken","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getStakeInOutcome_ = async (payoutDistributionHash: bigint): Promise<bigint> => {
		const methodSignature = 'getStakeInOutcome(bytes32 _payoutDistributionHash)' as const
		const methodParameters = [payoutDistributionHash] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getUniverse_ = async (): Promise<bigint> => {
		const methodSignature = 'getUniverse()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IUniverse","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getValidityBondAttoCash_ = async (): Promise<bigint> => {
		const methodSignature = 'getValidityBondAttoCash()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getWinningChildPayout_ = async (outcome: bigint): Promise<bigint> => {
		const methodSignature = 'getWinningChildPayout(uint256 _outcome)' as const
		const methodParameters = [outcome] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getWinningPayoutDistributionHash_ = async (): Promise<bigint> => {
		const methodSignature = 'getWinningPayoutDistributionHash()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bytes32","name":"","type":"bytes32"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getWinningPayoutNumerator_ = async (outcome: bigint): Promise<bigint> => {
		const methodSignature = 'getWinningPayoutNumerator(uint256 _outcome)' as const
		const methodParameters = [outcome] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public getWinningReportingParticipant_ = async (): Promise<bigint> => {
		const methodSignature = 'getWinningReportingParticipant()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IReportingParticipant","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public initialize = async (augur: bigint, universe: bigint, endTime: bigint, feePerCashInAttoCash: bigint, affiliateValidator: bigint, affiliateFeeDivisor: bigint, designatedReporterAddress: bigint, creator: bigint, numOutcomes: bigint, numTicks: bigint): Promise<Array<Event>> => {
		const methodSignature = 'initialize(address _augur, address _universe, uint256 _endTime, uint256 _feePerCashInAttoCash, address _affiliateValidator, uint256 _affiliateFeeDivisor, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks)' as const
		const methodParameters = [augur, universe, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'initialize' })
	}

	public initialize_ = async (augur: bigint, universe: bigint, endTime: bigint, feePerCashInAttoCash: bigint, affiliateValidator: bigint, affiliateFeeDivisor: bigint, designatedReporterAddress: bigint, creator: bigint, numOutcomes: bigint, numTicks: bigint): Promise<void> => {
		const methodSignature = 'initialize(address _augur, address _universe, uint256 _endTime, uint256 _feePerCashInAttoCash, address _affiliateValidator, uint256 _affiliateFeeDivisor, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks)' as const
		const methodParameters = [augur, universe, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public isContainerForReportingParticipant_ = async (shadyReportingParticipant: bigint): Promise<boolean> => {
		const methodSignature = 'isContainerForReportingParticipant(address _shadyReportingParticipant)' as const
		const methodParameters = [shadyReportingParticipant] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public isFinalized_ = async (): Promise<boolean> => {
		const methodSignature = 'isFinalized()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public isFinalizedAsInvalid_ = async (): Promise<boolean> => {
		const methodSignature = 'isFinalizedAsInvalid()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public isForkingMarket_ = async (): Promise<boolean> => {
		const methodSignature = 'isForkingMarket()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public marketCreatorFeesAttoCash_ = async (): Promise<bigint> => {
		const methodSignature = 'marketCreatorFeesAttoCash()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public migrateThroughOneFork = async (payoutNumerators: ReadonlyArray<bigint>, description: string): Promise<Array<Event>> => {
		const methodSignature = 'migrateThroughOneFork(uint256[] _payoutNumerators, string _description)' as const
		const methodParameters = [payoutNumerators, description] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'migrateThroughOneFork' })
	}

	public migrateThroughOneFork_ = async (payoutNumerators: ReadonlyArray<bigint>, description: string): Promise<boolean> => {
		const methodSignature = 'migrateThroughOneFork(uint256[] _payoutNumerators, string _description)' as const
		const methodParameters = [payoutNumerators, description] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public participants_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'participants(uint256 )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"internalType":"contract IReportingParticipant","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public preemptiveDisputeCrowdsourcer_ = async (): Promise<bigint> => {
		const methodSignature = 'preemptiveDisputeCrowdsourcer()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public recordMarketCreatorFees = async (marketCreatorFees: bigint, sourceAccount: bigint, fingerprint: bigint): Promise<Array<Event>> => {
		const methodSignature = 'recordMarketCreatorFees(uint256 _marketCreatorFees, address _sourceAccount, bytes32 _fingerprint)' as const
		const methodParameters = [marketCreatorFees, sourceAccount, fingerprint] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'recordMarketCreatorFees' })
	}

	public recordMarketCreatorFees_ = async (marketCreatorFees: bigint, sourceAccount: bigint, fingerprint: bigint): Promise<boolean> => {
		const methodSignature = 'recordMarketCreatorFees(uint256 _marketCreatorFees, address _sourceAccount, bytes32 _fingerprint)' as const
		const methodParameters = [marketCreatorFees, sourceAccount, fingerprint] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public repBond_ = async (): Promise<bigint> => {
		const methodSignature = 'repBond()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public repBondOwner_ = async (): Promise<bigint> => {
		const methodSignature = 'repBondOwner()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"address","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public shareToken_ = async (): Promise<bigint> => {
		const methodSignature = 'shareToken()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IShareToken","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public transferOwnership = async (newOwner: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferOwnership(address _newOwner)' as const
		const methodParameters = [newOwner] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferOwnership' })
	}

	public transferOwnership_ = async (newOwner: bigint): Promise<boolean> => {
		const methodSignature = 'transferOwnership(address _newOwner)' as const
		const methodParameters = [newOwner] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public transferRepBondOwnership = async (newOwner: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferRepBondOwnership(address _newOwner)' as const
		const methodParameters = [newOwner] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferRepBondOwnership' })
	}

	public transferRepBondOwnership_ = async (newOwner: bigint): Promise<boolean> => {
		const methodSignature = 'transferRepBondOwnership(address _newOwner)' as const
		const methodParameters = [newOwner] as const
		const outputParameterDescriptions = [{"internalType":"bool","name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public validityBondAttoCash_ = async (): Promise<bigint> => {
		const methodSignature = 'validityBondAttoCash()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"uint256","name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public warpSync_ = async (): Promise<bigint> => {
		const methodSignature = 'warpSync()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"internalType":"contract IWarpSync","name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}
}
