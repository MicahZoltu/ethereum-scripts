// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

import { EventDescription, DecodedEvent, ParameterDescription, EncodableArray, EncodableTuple, decodeParameters, decodeEvent, decodeMethod } from '@zoltu/ethereum-abi-encoder'
export { EncodableArray, EncodableTuple }

export interface Log {
	readonly topics: ReadonlyArray<bigint>
	readonly data: Uint8Array
}
export interface TransactionReceipt {
	readonly status: boolean
	readonly logs: Iterable<Log>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription & {signature: string} } = {
	'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {"type":"event","name":"Transfer","signature":"Transfer(address,address,uint256)","inputs":[{"type":"address","name":"_from","indexed":true},{"type":"address","name":"_to","indexed":true},{"type":"uint256","name":"_amount","indexed":false}]},
	'8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': {"type":"event","name":"Approval","signature":"Approval(address,address,uint256)","inputs":[{"type":"address","name":"_owner","indexed":true},{"type":"address","name":"_spender","indexed":true},{"type":"uint256","name":"_amount","indexed":false}]},
	'f381a3e2428fdda36615919e8d9c35878d9eb0cf85ac6edf575088e80e4c147e': {"type":"event","name":"FuelingToDate","signature":"FuelingToDate(uint256)","inputs":[{"type":"uint256","name":"value","indexed":false}]},
	'dbccb92686efceafb9bb7e0394df7f58f71b954061b81afb57109bf247d3d75a': {"type":"event","name":"CreatedToken","signature":"CreatedToken(address,uint256)","inputs":[{"type":"address","name":"to","indexed":true},{"type":"uint256","name":"amount","indexed":false}]},
	'bb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d': {"type":"event","name":"Refund","signature":"Refund(address,uint256)","inputs":[{"type":"address","name":"to","indexed":true},{"type":"uint256","name":"value","indexed":false}]},
	'5790de2c279e58269b93b12828f56fd5f2bc8ad15e61ce08572585c81a38756f': {"type":"event","name":"ProposalAdded","signature":"ProposalAdded(uint256,address,uint256,bool,string)","inputs":[{"type":"uint256","name":"proposalID","indexed":true},{"type":"address","name":"recipient","indexed":false},{"type":"uint256","name":"amount","indexed":false},{"type":"bool","name":"newCurator","indexed":false},{"type":"string","name":"description","indexed":false}]},
	'86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0': {"type":"event","name":"Voted","signature":"Voted(uint256,bool,address)","inputs":[{"type":"uint256","name":"proposalID","indexed":true},{"type":"bool","name":"position","indexed":false},{"type":"address","name":"voter","indexed":true}]},
	'dfc78bdca8e3e0b18c16c5c99323c6cb9eb5e00afde190b4e7273f5158702b07': {"type":"event","name":"ProposalTallied","signature":"ProposalTallied(uint256,bool,uint256)","inputs":[{"type":"uint256","name":"proposalID","indexed":true},{"type":"bool","name":"result","indexed":false},{"type":"uint256","name":"quorum","indexed":false}]},
	'9046fefd66f538ab35263248a44217dcb70e2eb2cd136629e141b8b8f9f03b60': {"type":"event","name":"NewCurator","signature":"NewCurator(address)","inputs":[{"type":"address","name":"_newCurator","indexed":true}]},
	'73ad2a153c8b67991df9459024950b318a609782cee8c7eeda47b905f9baa91f': {"type":"event","name":"AllowedRecipientChanged","signature":"AllowedRecipientChanged(address,bool)","inputs":[{"type":"address","name":"_recipient","indexed":true},{"type":"bool","name":"_allowed","indexed":false}]}
}

export namespace DAO {
	export interface Transfer extends DecodedEvent {
		name: 'Transfer'
		parameters: {
			_from: bigint
			_to: bigint
			_amount: bigint
		}
	}
}

export namespace DAO {
	export interface Approval extends DecodedEvent {
		name: 'Approval'
		parameters: {
			_owner: bigint
			_spender: bigint
			_amount: bigint
		}
	}
}

export namespace DAO {
	export interface FuelingToDate extends DecodedEvent {
		name: 'FuelingToDate'
		parameters: {
			value: bigint
		}
	}
}

export namespace DAO {
	export interface CreatedToken extends DecodedEvent {
		name: 'CreatedToken'
		parameters: {
			to: bigint
			amount: bigint
		}
	}
}

export namespace DAO {
	export interface Refund extends DecodedEvent {
		name: 'Refund'
		parameters: {
			to: bigint
			value: bigint
		}
	}
}

export namespace DAO {
	export interface ProposalAdded extends DecodedEvent {
		name: 'ProposalAdded'
		parameters: {
			proposalID: bigint
			recipient: bigint
			amount: bigint
			newCurator: boolean
			description: string
		}
	}
}

export namespace DAO {
	export interface Voted extends DecodedEvent {
		name: 'Voted'
		parameters: {
			proposalID: bigint
			position: boolean
			voter: bigint
		}
	}
}

export namespace DAO {
	export interface ProposalTallied extends DecodedEvent {
		name: 'ProposalTallied'
		parameters: {
			proposalID: bigint
			result: boolean
			quorum: bigint
		}
	}
}

export namespace DAO {
	export interface NewCurator extends DecodedEvent {
		name: 'NewCurator'
		parameters: {
			_newCurator: bigint
		}
	}
}

export namespace DAO {
	export interface AllowedRecipientChanged extends DecodedEvent {
		name: 'AllowedRecipientChanged'
		parameters: {
			_recipient: bigint
			_allowed: boolean
		}
	}
}

export type Event = DecodedEvent | DAO.Transfer | DAO.Approval | DAO.FuelingToDate | DAO.CreatedToken | DAO.Refund | DAO.ProposalAdded | DAO.Voted | DAO.ProposalTallied | DAO.NewCurator | DAO.AllowedRecipientChanged


export interface Dependencies {
	call(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<Uint8Array>
	submitTransaction(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract {
	protected constructor(protected readonly dependencies: Dependencies, public readonly address: bigint) { }

	protected async localCall(methodSignature: string, outputParameterDescriptions: ReadonlyArray<ParameterDescription>, methodParameters: EncodableArray, attachedEth?: bigint): Promise<EncodableTuple> {
		const result = await this.dependencies.call(this.address, methodSignature, methodParameters, attachedEth || 0n)
		if (result.length >= 4 && result[0] === 8 && result[1] === 195 && result[2] === 121 && result[3] === 160) {
			const decodedError = decodeMethod(0x08c379a0, [ { name: 'message', type: 'string' } ], result) as { message: string }
			throw new Error(`Contract Error: ${decodedError.message}`)
		}
		return decodeParameters(outputParameterDescriptions, result)
	}

	protected async remoteCall(methodSignature: string, parameters: EncodableArray, errorContext: { transactionName: string }, attachedEth?: bigint): Promise<Array<Event>> {
		const transactionReceipt = await this.dependencies.submitTransaction(this.address, methodSignature, parameters, attachedEth || 0n)
		if (!transactionReceipt.status) throw new Error(`Remote call of ${errorContext.transactionName} failed: ${JSON.stringify(transactionReceipt)}`)
		return this.decodeEvents(transactionReceipt.logs)
	}

	private decodeEvents(encodedEvents: Iterable<Log>): Array<Event> {
		const decodedEvents: Array<DecodedEvent> = []
		for (const encodedEvent of encodedEvents) {
			const decodedEvent = this.tryDecodeEvent(encodedEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		}
		return decodedEvents as Array<Event>
	}

	private tryDecodeEvent(encodedEvent: Log): DecodedEvent | null {
		const signatureHash = encodedEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash.toString(16)]
		if (!eventDescription) return null
		return decodeEvent(eventDescription, encodedEvent.topics, encodedEvent.data)
	}
}


export class DAO extends Contract {
	public constructor(dependencies: Dependencies, address: bigint) {
		super(dependencies, address)
	}

	public proposals = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'proposals(uint256 )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'proposals' })
	}

	public proposals_ = async (arg0: bigint): Promise<{recipient: bigint, amount: bigint, description: string, votingDeadline: bigint, open: boolean, proposalPassed: boolean, proposalHash: bigint, proposalDeposit: bigint, newCurator: boolean, yea: bigint, nay: bigint, creator: bigint}> => {
		const methodSignature = 'proposals(uint256 )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"description","type":"string"},{"name":"votingDeadline","type":"uint256"},{"name":"open","type":"bool"},{"name":"proposalPassed","type":"bool"},{"name":"proposalHash","type":"bytes32"},{"name":"proposalDeposit","type":"uint256"},{"name":"newCurator","type":"bool"},{"name":"yea","type":"uint256"},{"name":"nay","type":"uint256"},{"name":"creator","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <{recipient: bigint, amount: bigint, description: string, votingDeadline: bigint, open: boolean, proposalPassed: boolean, proposalHash: bigint, proposalDeposit: bigint, newCurator: boolean, yea: bigint, nay: bigint, creator: bigint}>result
	}

	public approve = async (spender: bigint, amount: bigint): Promise<Array<Event>> => {
		const methodSignature = 'approve(address _spender, uint256 _amount)' as const
		const methodParameters = [spender, amount] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'approve' })
	}

	public approve_ = async (spender: bigint, amount: bigint): Promise<boolean> => {
		const methodSignature = 'approve(address _spender, uint256 _amount)' as const
		const methodParameters = [spender, amount] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public minTokensToCreate = async (): Promise<Array<Event>> => {
		const methodSignature = 'minTokensToCreate()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'minTokensToCreate' })
	}

	public minTokensToCreate_ = async (): Promise<bigint> => {
		const methodSignature = 'minTokensToCreate()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public rewardAccount = async (): Promise<Array<Event>> => {
		const methodSignature = 'rewardAccount()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'rewardAccount' })
	}

	public rewardAccount_ = async (): Promise<bigint> => {
		const methodSignature = 'rewardAccount()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public daoCreator = async (): Promise<Array<Event>> => {
		const methodSignature = 'daoCreator()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'daoCreator' })
	}

	public daoCreator_ = async (): Promise<bigint> => {
		const methodSignature = 'daoCreator()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public totalSupply = async (): Promise<Array<Event>> => {
		const methodSignature = 'totalSupply()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'totalSupply' })
	}

	public totalSupply_ = async (): Promise<bigint> => {
		const methodSignature = 'totalSupply()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public divisor = async (): Promise<Array<Event>> => {
		const methodSignature = 'divisor()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'divisor' })
	}

	public divisor_ = async (): Promise<bigint> => {
		const methodSignature = 'divisor()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"divisor","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.divisor
	}

	public extraBalance = async (): Promise<Array<Event>> => {
		const methodSignature = 'extraBalance()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'extraBalance' })
	}

	public extraBalance_ = async (): Promise<bigint> => {
		const methodSignature = 'extraBalance()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public executeProposal = async (proposalID: bigint, transactionData: Uint8Array): Promise<Array<Event>> => {
		const methodSignature = 'executeProposal(uint256 _proposalID, bytes _transactionData)' as const
		const methodParameters = [proposalID, transactionData] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'executeProposal' })
	}

	public executeProposal_ = async (proposalID: bigint, transactionData: Uint8Array): Promise<boolean> => {
		const methodSignature = 'executeProposal(uint256 _proposalID, bytes _transactionData)' as const
		const methodParameters = [proposalID, transactionData] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public transferFrom = async (from: bigint, to: bigint, value: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferFrom(address _from, address _to, uint256 _value)' as const
		const methodParameters = [from, to, value] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferFrom' })
	}

	public transferFrom_ = async (from: bigint, to: bigint, value: bigint): Promise<boolean> => {
		const methodSignature = 'transferFrom(address _from, address _to, uint256 _value)' as const
		const methodParameters = [from, to, value] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public unblockMe = async (): Promise<Array<Event>> => {
		const methodSignature = 'unblockMe()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'unblockMe' })
	}

	public unblockMe_ = async (): Promise<boolean> => {
		const methodSignature = 'unblockMe()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public totalRewardToken = async (): Promise<Array<Event>> => {
		const methodSignature = 'totalRewardToken()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'totalRewardToken' })
	}

	public totalRewardToken_ = async (): Promise<bigint> => {
		const methodSignature = 'totalRewardToken()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public actualBalance = async (): Promise<Array<Event>> => {
		const methodSignature = 'actualBalance()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'actualBalance' })
	}

	public actualBalance_ = async (): Promise<bigint> => {
		const methodSignature = 'actualBalance()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"_actualBalance","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result._actualBalance
	}

	public closingTime = async (): Promise<Array<Event>> => {
		const methodSignature = 'closingTime()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'closingTime' })
	}

	public closingTime_ = async (): Promise<bigint> => {
		const methodSignature = 'closingTime()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public allowedRecipients = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'allowedRecipients(address )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'allowedRecipients' })
	}

	public allowedRecipients_ = async (arg0: bigint): Promise<boolean> => {
		const methodSignature = 'allowedRecipients(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public transferWithoutReward = async (to: bigint, value: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferWithoutReward(address _to, uint256 _value)' as const
		const methodParameters = [to, value] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferWithoutReward' })
	}

	public transferWithoutReward_ = async (to: bigint, value: bigint): Promise<boolean> => {
		const methodSignature = 'transferWithoutReward(address _to, uint256 _value)' as const
		const methodParameters = [to, value] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public refund = async (): Promise<Array<Event>> => {
		const methodSignature = 'refund()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'refund' })
	}

	public refund_ = async (): Promise<void> => {
		const methodSignature = 'refund()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public newProposal = async (recipient: bigint, amount: bigint, description: string, transactionData: Uint8Array, debatingPeriod: bigint, newCurator: boolean): Promise<Array<Event>> => {
		const methodSignature = 'newProposal(address _recipient, uint256 _amount, string _description, bytes _transactionData, uint256 _debatingPeriod, bool _newCurator)' as const
		const methodParameters = [recipient, amount, description, transactionData, debatingPeriod, newCurator] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'newProposal' })
	}

	public newProposal_ = async (recipient: bigint, amount: bigint, description: string, transactionData: Uint8Array, debatingPeriod: bigint, newCurator: boolean): Promise<bigint> => {
		const methodSignature = 'newProposal(address _recipient, uint256 _amount, string _description, bytes _transactionData, uint256 _debatingPeriod, bool _newCurator)' as const
		const methodParameters = [recipient, amount, description, transactionData, debatingPeriod, newCurator] as const
		const outputParameterDescriptions = [{"name":"_proposalID","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result._proposalID
	}

	public DAOpaidOut = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'DAOpaidOut(address )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'DAOpaidOut' })
	}

	public DAOpaidOut_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'DAOpaidOut(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public minQuorumDivisor = async (): Promise<Array<Event>> => {
		const methodSignature = 'minQuorumDivisor()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'minQuorumDivisor' })
	}

	public minQuorumDivisor_ = async (): Promise<bigint> => {
		const methodSignature = 'minQuorumDivisor()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public newContract = async (newContract: bigint): Promise<Array<Event>> => {
		const methodSignature = 'newContract(address _newContract)' as const
		const methodParameters = [newContract] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'newContract' })
	}

	public newContract_ = async (newContract: bigint): Promise<void> => {
		const methodSignature = 'newContract(address _newContract)' as const
		const methodParameters = [newContract] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public balanceOf = async (owner: bigint): Promise<Array<Event>> => {
		const methodSignature = 'balanceOf(address _owner)' as const
		const methodParameters = [owner] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'balanceOf' })
	}

	public balanceOf_ = async (owner: bigint): Promise<bigint> => {
		const methodSignature = 'balanceOf(address _owner)' as const
		const methodParameters = [owner] as const
		const outputParameterDescriptions = [{"name":"balance","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.balance
	}

	public changeAllowedRecipients = async (recipient: bigint, allowed: boolean): Promise<Array<Event>> => {
		const methodSignature = 'changeAllowedRecipients(address _recipient, bool _allowed)' as const
		const methodParameters = [recipient, allowed] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'changeAllowedRecipients' })
	}

	public changeAllowedRecipients_ = async (recipient: bigint, allowed: boolean): Promise<boolean> => {
		const methodSignature = 'changeAllowedRecipients(address _recipient, bool _allowed)' as const
		const methodParameters = [recipient, allowed] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public halveMinQuorum = async (): Promise<Array<Event>> => {
		const methodSignature = 'halveMinQuorum()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'halveMinQuorum' })
	}

	public halveMinQuorum_ = async (): Promise<boolean> => {
		const methodSignature = 'halveMinQuorum()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public paidOut = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'paidOut(address )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'paidOut' })
	}

	public paidOut_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'paidOut(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public splitDAO = async (proposalID: bigint, newCurator: bigint): Promise<Array<Event>> => {
		const methodSignature = 'splitDAO(uint256 _proposalID, address _newCurator)' as const
		const methodParameters = [proposalID, newCurator] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'splitDAO' })
	}

	public splitDAO_ = async (proposalID: bigint, newCurator: bigint): Promise<boolean> => {
		const methodSignature = 'splitDAO(uint256 _proposalID, address _newCurator)' as const
		const methodParameters = [proposalID, newCurator] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public DAOrewardAccount = async (): Promise<Array<Event>> => {
		const methodSignature = 'DAOrewardAccount()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'DAOrewardAccount' })
	}

	public DAOrewardAccount_ = async (): Promise<bigint> => {
		const methodSignature = 'DAOrewardAccount()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public proposalDeposit = async (): Promise<Array<Event>> => {
		const methodSignature = 'proposalDeposit()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'proposalDeposit' })
	}

	public proposalDeposit_ = async (): Promise<bigint> => {
		const methodSignature = 'proposalDeposit()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public numberOfProposals = async (): Promise<Array<Event>> => {
		const methodSignature = 'numberOfProposals()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'numberOfProposals' })
	}

	public numberOfProposals_ = async (): Promise<bigint> => {
		const methodSignature = 'numberOfProposals()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"_numberOfProposals","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result._numberOfProposals
	}

	public lastTimeMinQuorumMet = async (): Promise<Array<Event>> => {
		const methodSignature = 'lastTimeMinQuorumMet()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'lastTimeMinQuorumMet' })
	}

	public lastTimeMinQuorumMet_ = async (): Promise<bigint> => {
		const methodSignature = 'lastTimeMinQuorumMet()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public retrieveDAOReward = async (toMembers: boolean): Promise<Array<Event>> => {
		const methodSignature = 'retrieveDAOReward(bool _toMembers)' as const
		const methodParameters = [toMembers] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'retrieveDAOReward' })
	}

	public retrieveDAOReward_ = async (toMembers: boolean): Promise<boolean> => {
		const methodSignature = 'retrieveDAOReward(bool _toMembers)' as const
		const methodParameters = [toMembers] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public receiveEther = async (): Promise<Array<Event>> => {
		const methodSignature = 'receiveEther()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'receiveEther' })
	}

	public receiveEther_ = async (): Promise<boolean> => {
		const methodSignature = 'receiveEther()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public transfer = async (to: bigint, value: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transfer(address _to, uint256 _value)' as const
		const methodParameters = [to, value] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transfer' })
	}

	public transfer_ = async (to: bigint, value: bigint): Promise<boolean> => {
		const methodSignature = 'transfer(address _to, uint256 _value)' as const
		const methodParameters = [to, value] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public isFueled = async (): Promise<Array<Event>> => {
		const methodSignature = 'isFueled()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'isFueled' })
	}

	public isFueled_ = async (): Promise<boolean> => {
		const methodSignature = 'isFueled()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.result
	}

	public createTokenProxy = async (tokenHolder: bigint): Promise<Array<Event>> => {
		const methodSignature = 'createTokenProxy(address _tokenHolder)' as const
		const methodParameters = [tokenHolder] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'createTokenProxy' })
	}

	public createTokenProxy_ = async (tokenHolder: bigint): Promise<boolean> => {
		const methodSignature = 'createTokenProxy(address _tokenHolder)' as const
		const methodParameters = [tokenHolder] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public getNewDAOAddress = async (proposalID: bigint): Promise<Array<Event>> => {
		const methodSignature = 'getNewDAOAddress(uint256 _proposalID)' as const
		const methodParameters = [proposalID] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'getNewDAOAddress' })
	}

	public getNewDAOAddress_ = async (proposalID: bigint): Promise<bigint> => {
		const methodSignature = 'getNewDAOAddress(uint256 _proposalID)' as const
		const methodParameters = [proposalID] as const
		const outputParameterDescriptions = [{"name":"_newDAO","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result._newDAO
	}

	public vote = async (proposalID: bigint, supportsProposal: boolean): Promise<Array<Event>> => {
		const methodSignature = 'vote(uint256 _proposalID, bool _supportsProposal)' as const
		const methodParameters = [proposalID, supportsProposal] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'vote' })
	}

	public vote_ = async (proposalID: bigint, supportsProposal: boolean): Promise<bigint> => {
		const methodSignature = 'vote(uint256 _proposalID, bool _supportsProposal)' as const
		const methodParameters = [proposalID, supportsProposal] as const
		const outputParameterDescriptions = [{"name":"_voteID","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result._voteID
	}

	public getMyReward = async (): Promise<Array<Event>> => {
		const methodSignature = 'getMyReward()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'getMyReward' })
	}

	public getMyReward_ = async (): Promise<boolean> => {
		const methodSignature = 'getMyReward()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"_success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._success
	}

	public rewardToken = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'rewardToken(address )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'rewardToken' })
	}

	public rewardToken_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'rewardToken(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public transferFromWithoutReward = async (from: bigint, to: bigint, value: bigint): Promise<Array<Event>> => {
		const methodSignature = 'transferFromWithoutReward(address _from, address _to, uint256 _value)' as const
		const methodParameters = [from, to, value] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'transferFromWithoutReward' })
	}

	public transferFromWithoutReward_ = async (from: bigint, to: bigint, value: bigint): Promise<boolean> => {
		const methodSignature = 'transferFromWithoutReward(address _from, address _to, uint256 _value)' as const
		const methodParameters = [from, to, value] as const
		const outputParameterDescriptions = [{"name":"success","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result.success
	}

	public allowance = async (owner: bigint, spender: bigint): Promise<Array<Event>> => {
		const methodSignature = 'allowance(address _owner, address _spender)' as const
		const methodParameters = [owner, spender] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'allowance' })
	}

	public allowance_ = async (owner: bigint, spender: bigint): Promise<bigint> => {
		const methodSignature = 'allowance(address _owner, address _spender)' as const
		const methodParameters = [owner, spender] as const
		const outputParameterDescriptions = [{"name":"remaining","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.remaining
	}

	public changeProposalDeposit = async (proposalDeposit: bigint): Promise<Array<Event>> => {
		const methodSignature = 'changeProposalDeposit(uint256 _proposalDeposit)' as const
		const methodParameters = [proposalDeposit] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'changeProposalDeposit' })
	}

	public changeProposalDeposit_ = async (proposalDeposit: bigint): Promise<void> => {
		const methodSignature = 'changeProposalDeposit(uint256 _proposalDeposit)' as const
		const methodParameters = [proposalDeposit] as const
		const outputParameterDescriptions = [] as const
		await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
	}

	public blocked = async (arg0: bigint): Promise<Array<Event>> => {
		const methodSignature = 'blocked(address )' as const
		const methodParameters = [arg0] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'blocked' })
	}

	public blocked_ = async (arg0: bigint): Promise<bigint> => {
		const methodSignature = 'blocked(address )' as const
		const methodParameters = [arg0] as const
		const outputParameterDescriptions = [{"name":"","type":"uint256"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public curator = async (): Promise<Array<Event>> => {
		const methodSignature = 'curator()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'curator' })
	}

	public curator_ = async (): Promise<bigint> => {
		const methodSignature = 'curator()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}

	public checkProposalCode = async (proposalID: bigint, recipient: bigint, amount: bigint, transactionData: Uint8Array): Promise<Array<Event>> => {
		const methodSignature = 'checkProposalCode(uint256 _proposalID, address _recipient, uint256 _amount, bytes _transactionData)' as const
		const methodParameters = [proposalID, recipient, amount, transactionData] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'checkProposalCode' })
	}

	public checkProposalCode_ = async (proposalID: bigint, recipient: bigint, amount: bigint, transactionData: Uint8Array): Promise<boolean> => {
		const methodSignature = 'checkProposalCode(uint256 _proposalID, address _recipient, uint256 _amount, bytes _transactionData)' as const
		const methodParameters = [proposalID, recipient, amount, transactionData] as const
		const outputParameterDescriptions = [{"name":"_codeChecksOut","type":"bool"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <boolean>result._codeChecksOut
	}

	public privateCreation = async (): Promise<Array<Event>> => {
		const methodSignature = 'privateCreation()' as const
		const methodParameters = [] as const
		return await this.remoteCall(methodSignature, methodParameters, { transactionName: 'privateCreation' })
	}

	public privateCreation_ = async (): Promise<bigint> => {
		const methodSignature = 'privateCreation()' as const
		const methodParameters = [] as const
		const outputParameterDescriptions = [{"name":"","type":"address"}] as const
		const result = await this.localCall(methodSignature, outputParameterDescriptions, methodParameters)
		return <bigint>result.result
	}
}
